# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import compression_pb2 as compression__pb2


class CompressorStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Compress = channel.unary_unary(
                '/Compressor/Compress',
                request_serializer=compression__pb2.CompressionRequest.SerializeToString,
                response_deserializer=compression__pb2.CompressionReply.FromString,
                )
        self.Join = channel.unary_unary(
                '/Compressor/Join',
                request_serializer=compression__pb2.JoinRequest.SerializeToString,
                response_deserializer=compression__pb2.JoinReply.FromString,
                )


class CompressorServicer(object):
    """Missing associated documentation comment in .proto file."""

    def Compress(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Join(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_CompressorServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Compress': grpc.unary_unary_rpc_method_handler(
                    servicer.Compress,
                    request_deserializer=compression__pb2.CompressionRequest.FromString,
                    response_serializer=compression__pb2.CompressionReply.SerializeToString,
            ),
            'Join': grpc.unary_unary_rpc_method_handler(
                    servicer.Join,
                    request_deserializer=compression__pb2.JoinRequest.FromString,
                    response_serializer=compression__pb2.JoinReply.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'Compressor', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Compressor(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def Compress(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Compressor/Compress',
            compression__pb2.CompressionRequest.SerializeToString,
            compression__pb2.CompressionReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Join(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Compressor/Join',
            compression__pb2.JoinRequest.SerializeToString,
            compression__pb2.JoinReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class DecompressorStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Decompress = channel.unary_unary(
                '/Decompressor/Decompress',
                request_serializer=compression__pb2.DecompressionRequest.SerializeToString,
                response_deserializer=compression__pb2.DecompressionReply.FromString,
                )
        self.Join = channel.unary_unary(
                '/Decompressor/Join',
                request_serializer=compression__pb2.JoinRequest.SerializeToString,
                response_deserializer=compression__pb2.JoinReply.FromString,
                )


class DecompressorServicer(object):
    """Missing associated documentation comment in .proto file."""

    def Decompress(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Join(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_DecompressorServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Decompress': grpc.unary_unary_rpc_method_handler(
                    servicer.Decompress,
                    request_deserializer=compression__pb2.DecompressionRequest.FromString,
                    response_serializer=compression__pb2.DecompressionReply.SerializeToString,
            ),
            'Join': grpc.unary_unary_rpc_method_handler(
                    servicer.Join,
                    request_deserializer=compression__pb2.JoinRequest.FromString,
                    response_serializer=compression__pb2.JoinReply.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'Decompressor', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Decompressor(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def Decompress(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Decompressor/Decompress',
            compression__pb2.DecompressionRequest.SerializeToString,
            compression__pb2.DecompressionReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Join(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Decompressor/Join',
            compression__pb2.JoinRequest.SerializeToString,
            compression__pb2.JoinReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
